{
  "name": "showify",
  "version": "0.1.1",
  "private": true,
  "description": "Arguably the most comprehensive library for stringifying any JavaScript value into a human-readable format, handling nearly every scenario you might encounter.",
  "keywords": [
    "string",
    "stringify",
    "text",
    "format",
    "formatting",
    "human-readable",
    "pretty",
    "pretty-print",
    "log",
    "logging",
    "color",
    "colour",
    "colors",
    "terminal",
    "console",
    "tty",
    "shell",
    "command-line"
  ],
  "homepage": "https://github.com/Snowflyt/showify",
  "bugs": {
    "url": "https://github.com/Snowflyt/showify/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Snowflyt/showify"
  },
  "license": "MPL-2.0",
  "author": "Ge Gao (Snowflyt) <gaoge011022@gmail.com>",
  "sideEffects": false,
  "type": "module",
  "main": "./index.js",
  "module": "./index.js",
  "types": "./index.d.ts",
  "workspaces": [
    "packages/*"
  ],
  "scripts": {
    "bench": "vitest bench --run",
    "bench:watch": "vitest bench",
    "build": "rimraf dist && npm run --silent compile && cpy package.json dist && json -I -f dist/package.json -e \"delete this.private; delete this.workspaces; delete this.scripts; delete this.devDependencies\" && cpy README.md dist && cpy LICENSE dist && cpy COMMERCIAL_LICENSE.md dist && cpy screenshot.png dist",
    "compile": "tsc --emitDeclarationOnly -p tsconfig.build.json && cpy src/**/*.ts dist && node -e \"import path from 'node:path'; import fs from 'node:fs'; import tsBlankSpace from 'ts-blank-space'; fs.readdirSync('dist', { recursive: true }).map((file) => path.join('dist', file)).filter((file) => file.endsWith('.ts') && !file.endsWith('.d.ts') && fs.statSync(file).isFile()).forEach((file) => { fs.writeFileSync(file.substring(0, file.lastIndexOf('.')) + '.js', tsBlankSpace(fs.readFileSync(file, 'utf-8'))); fs.rmSync(file); })\" && tsc-alias -p tsconfig.build.json && node -e \"import { replaceInFileSync } from 'replace-in-file'; [/ *\\/\\/ eslint-disable-next-line [^\\n]+\\n/g, / *\\/\\* eslint-(disable|enable) [^\\n]+ \\*\\/\\n/g, /^\\s*\\/\\/ @ts-.+$/gm].forEach((regex) => replaceInFileSync({ files: 'dist/**/*.js', from: regex, to: '' }))\" && prettier --log-level=silent --print-width 80 --write dist/**/* --ignore-path !dist/**/* && node -e \"import { replaceInFileSync } from 'replace-in-file'; replaceInFileSync({ files: 'dist/**/*.js', from: /^ *\\*\\/\\n\\n/gm, to: '*/\\n' }); replaceInFileSync({ files: 'dist/**/*.js', from: /^ *\\/\\*\\*\\n(( \\*( [^\\n]*)?\\n)+) *\\*\\/\\n( *\\/)/gm, to: '$4' })\" && prettier --log-level=silent --print-width 80 --write dist/**/* --ignore-path !dist/**/*",
    "format": "prettier --no-error-on-unmatched-pattern --write **/*.{js,ts,json,md} *.{cjs,mjs,cts,mts}",
    "lint": "eslint **/*.{js,ts} *.{cjs,mjs,cts,mts} --no-error-on-unmatched-pattern --report-unused-disable-directives-severity error --max-warnings 0",
    "lint:fix": "eslint --fix **/*.{js,ts} *.{cjs,mjs,cts,mts} --no-error-on-unmatched-pattern --report-unused-disable-directives-severity error --max-warnings 0",
    "measure-size": "rimraf dist && npm run --silent compile && esbuild --bundle --minify --platform=neutral --log-level=silent --outfile=dist/showify.min.js dist/index.js && node -e \"import fs from 'node:fs'; import prettyBytes from 'pretty-bytes'; import { gzipSizeSync } from 'gzip-size'; import brotliSize from 'brotli-size'; const fixed = 3; const content = fs.readFileSync('dist/showify.min.js', 'utf-8'); console.log('gzip:  ', `\\x1b[33m${prettyBytes(content.length, { maximumFractionDigits: fixed })}\\x1b[0m (bundled+minified)`, '→', `\\x1b[36m${prettyBytes(gzipSizeSync(content), { maximumFractionDigits: fixed })}\\x1b[0m`); console.log('brotli:', `\\x1b[33m${prettyBytes(content.length, { maximumFractionDigits: fixed })}\\x1b[0m (bundled+minified)`, '→', `\\x1b[36m${prettyBytes(brotliSize.sync(content), { maximumFractionDigits: fixed })}\\x1b[0m`)\" && rimraf dist",
    "test": "vitest run",
    "test:cov": "vitest run --dir test --coverage --coverage.reporter=text --coverage.reporter=lcov --coverage.include \"src/**/*.ts\"",
    "test:ui": "vitest --ui --dir test --coverage.enabled=true --coverage.include \"src/**/*.ts\"",
    "test:watch": "vitest --dir test",
    "test:watch-cov": "vitest --dir test --coverage --coverage.reporter=text --coverage.reporter=lcov --coverage.include \"src/**/*.ts\""
  },
  "devDependencies": {
    "@commitlint/cli": "^19.7.1",
    "@types/eslint": "^8.56.12",
    "@typescript-eslint/eslint-plugin": "^8.24.1",
    "@typescript-eslint/parser": "^8.24.1",
    "@vitest/coverage-v8": "^3.0.6",
    "@vitest/ui": "^3.0.6",
    "brotli-size": "^4.0.0",
    "cpy-cli": "^5.0.0",
    "esbuild": "^0.25.0",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^10.0.1",
    "eslint-import-resolver-typescript": "^3.8.3",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.3",
    "eslint-plugin-sonarjs": "^0.25.1",
    "eslint-plugin-sort-destructure-keys": "^2.0.0",
    "gzip-size": "^7.0.0",
    "json": "^11.0.0",
    "prettier": "^3.5.1",
    "prettier-plugin-packagejson": "^2.5.8",
    "pretty-bytes": "^6.1.1",
    "replace-in-file": "^8.3.0",
    "rimraf": "^6.0.1",
    "ts-blank-space": "^0.6.0",
    "tsc-alias": "^1.8.10",
    "typescript": "^5.7.3",
    "vitest": "^3.0.6"
  }
}
